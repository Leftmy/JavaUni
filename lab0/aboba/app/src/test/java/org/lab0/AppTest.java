/*
 * This source file was generated by the Gradle 'init' task
 */
package org.lab0;

import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.CsvSource;
import org.junit.jupiter.params.provider.MethodSource;


class AppTest {
    @Test
    void testInteger() {
        assertEquals(8, new App().IntegerTask(44));
    }
    @Test
    void testIntegerError(){
        assertThrows(IllegalArgumentException.class, () -> {
            new App().IntegerTask(1);
        });
    }
    @Test
    void testBoolean(){
        assertEquals(false, new App().BooleanTask(4, 2, 3));
    }
    @ParameterizedTest
    @CsvSource(value = {
        "1,2,2",
        "3,2,1",
        "1000,10000,2",
        "23453123, 12384866, 1"
    })
    void testIf(int a,int b, int result){
        assertEquals(result, new App().IfTask(a, b));
    }
    @ParameterizedTest
    @CsvSource(value = {
        "1,1000,1000",
        "2,1000,0.001",
        "3,1000,1",
        "4,1000,1000000",
        "5,1000,100000"
    })
    void testCase(int a,int b, double result){
        assertEquals(result,new App().CaseTask(a, b));
    }
    @Test
    void testCaseError(){
        assertThrows(IllegalArgumentException.class, () -> {
            new App().CaseTask(6, 10.0);
        });
    }
    @Test
    void testFor(){
        assertEquals(45, new App().ForTask(1, 9));
    }
    @Test
    void testForError(){
        assertThrows(IllegalArgumentException.class, () -> {
            new App().ForTask(9, 1);
        });
    }
    @ParameterizedTest
    @CsvSource(value = {
        "6,3",
        "100,10",
        "23567,154"
    })
    void testWhile(int n, int result){
        assertEquals(result, new App().WhileTask(n));
    }
    @Test
    void testWhileError(){
        assertThrows(IllegalArgumentException.class, () -> {
            new App().WhileTask(-1);
        });
    }

    @ParameterizedTest
    @MethodSource("ArrayTaskTestData")
    void testArrayTask(int[] a, int [] result){
        assertArrayEquals(result, new App().ArrayTask(a));
    }
    static Stream<Arguments> ArrayTaskTestData(){
        return Stream.of(
                Arguments.arguments(new int[]{1,2,3}, new int[]{3,2,1}),
                Arguments.arguments(new int[]{13,20,7}, new int[]{7,20,13}),
                Arguments.arguments(new int[]{54,3,723},new int[]{723,3,54})
        );
    }

    @ParameterizedTest
    @MethodSource("MatrixTaskTestData")
    void testMatrixTest(int[][] a, int k, int[] result){
        assertArrayEquals(result, new App().MatrixTask(a,k));
    }

    static Stream<Arguments> MatrixTaskTestData(){
        return Stream.of(
          Arguments.arguments(new int[][]{{1,2,3},{4,5,6},{7,8,9}},1,new int[]{4,5,6}),
          Arguments.arguments(new int[][]{{1,2,3},{4,5,6},{7,8,9}},2,new int[]{7,8,9}),
          Arguments.arguments(new int[][]{{1,2,3},{7,8,9}},0,new int[]{1,2,3})
        );
    }
}
